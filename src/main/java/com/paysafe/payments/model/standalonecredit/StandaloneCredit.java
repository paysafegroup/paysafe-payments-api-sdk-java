// All Rights Reserved, Copyright Â© Paysafe Holdings UK Limited 2025. For more information see LICENSE

package com.paysafe.payments.model.standalonecredit;

import java.util.List;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.paysafe.payments.model.card.Card;
import com.paysafe.payments.model.card.MerchantDescriptor;
import com.paysafe.payments.model.common.BillingDetails;
import com.paysafe.payments.model.common.ReturnLink;
import com.paysafe.payments.model.common.enums.CurrencyCode;
import com.paysafe.payments.model.common.enums.TransactionRequestStatus;
import com.paysafe.payments.model.common.paymentfacilitator.PaymentFacilitator;
import com.paysafe.payments.model.common.profile.Profile;
import com.paysafe.payments.model.paymenthandle.enums.PaymentType;
import com.paysafe.payments.model.standalonecredit.enums.TransactionIntentCredit;

/**
 * StandaloneCredit
 */
public class StandaloneCredit {

  @JsonProperty("merchantRefNum")
  private String merchantRefNum;
  @JsonProperty("paymentHandleToken")
  private String paymentHandleToken;
  @JsonProperty("amount")
  private Integer amount;
  @JsonProperty("currencyCode")
  private CurrencyCode currencyCode;
  @JsonProperty("customerIp")
  private String customerIp;
  @JsonProperty("onHold")
  private Boolean onHold = true;
  @JsonProperty("description")
  private String description;
  @JsonProperty("dupCheck")
  private Boolean dupCheck = true;
  @JsonProperty("merchantDescriptor")
  private MerchantDescriptor merchantDescriptor;
  @JsonProperty("paymentFacilitator")
  private PaymentFacilitator paymentFacilitator;
  @JsonProperty("sender")
  private Sender sender;
  @JsonProperty("sourceOfFunds")
  private String sourceOfFunds;
  @JsonProperty("id")
  private String id;
  @JsonProperty("cardSchemeTransactionId")
  private String cardSchemeTransactionId;
  @JsonProperty("paymentType")
  private PaymentType paymentType;
  @JsonProperty("txnTime")
  private String txnTime;
  @JsonProperty("billingDetails")
  private BillingDetails billingDetails;
  @JsonProperty("status")
  private TransactionRequestStatus status;
  @JsonProperty("returnLinks")
  private List<ReturnLink> returnLinks;
  @JsonProperty("liveMode")
  private Boolean liveMode;
  @JsonProperty("updatedTime")
  private String updatedTime;
  @JsonProperty("statusTime")
  private String statusTime;
  @JsonProperty("profile")
  private Profile profile;
  @JsonProperty("transactionIntent")
  private TransactionIntentCredit transactionIntent;
  @JsonProperty("gatewayReconciliationId")
  private String gatewayReconciliationId;
  @JsonProperty("card")
  private Card card;
  @JsonProperty("interacEtransfer")
  private Interac interacEtransfer;

  public StandaloneCredit() {
    super();
  }

  private StandaloneCredit(final Builder builder) {
    setMerchantRefNum(builder.merchantRefNum);
    setPaymentHandleToken(builder.paymentHandleToken);
    setAmount(builder.amount);
    setCurrencyCode(builder.currencyCode);
    setCustomerIp(builder.customerIp);
    setOnHold(builder.onHold);
    setDescription(builder.description);
    setDupCheck(builder.dupCheck);
    setMerchantDescriptor(builder.merchantDescriptor);
    setPaymentFacilitator(builder.paymentFacilitator);
    setSender(builder.sender);
    setSourceOfFunds(builder.sourceOfFunds);
    setId(builder.id);
    setCardSchemeTransactionId(builder.cardSchemeTransactionId);
    setPaymentType(builder.paymentType);
    setTxnTime(builder.txnTime);
    setBillingDetails(builder.billingDetails);
    setStatus(builder.status);
    setReturnLinks(builder.returnLinks);
    setLiveMode(builder.liveMode);
    setUpdatedTime(builder.updatedTime);
    setStatusTime(builder.statusTime);
    setProfile(builder.profile);
    setTransactionIntent(builder.transactionIntent);
    setGatewayReconciliationId(builder.gatewayReconciliationId);
    setCard(builder.card);
    setInteracEtransfer(builder.interacEtransfer);
  }

  public static Builder builder() {
    return new Builder();
  }

  public StandaloneCredit merchantRefNum(String merchantRefNum) {
    this.merchantRefNum = merchantRefNum;
    return this;
  }

  /**
   * This is the merchant reference number created by  the merchant and submitted as part of the request. It must be unique for each request.
   *
   * @return merchantRefNum
   */
  public String getMerchantRefNum() {
    return merchantRefNum;
  }

  public void setMerchantRefNum(String merchantRefNum) {
    this.merchantRefNum = merchantRefNum;
  }

  public StandaloneCredit paymentHandleToken(String paymentHandleToken) {
    this.paymentHandleToken = paymentHandleToken;
    return this;
  }

  /**
   * This is the payment token generated by Paysafe that will be used for the request.
   *
   * @return paymentHandleToken
   */
  public String getPaymentHandleToken() {
    return paymentHandleToken;
  }

  public void setPaymentHandleToken(String paymentHandleToken) {
    this.paymentHandleToken = paymentHandleToken;
  }

  public StandaloneCredit amount(Integer amount) {
    this.amount = amount;
    return this;
  }

  /**
   * This is the amount of the request, in minor units. For example, to process US $10.99, this value  should be 1099.  <br>
   * <b>Note:</b> The amount specified in the Credit request must match the amount specified in the Payment  Handle request from which the
   * paymentHandleToken is taken.
   *
   * @return amount
   */
  public Integer getAmount() {
    return amount;
  }

  public void setAmount(Integer amount) {
    this.amount = amount;
  }

  public StandaloneCredit currencyCode(CurrencyCode currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * This is the currency of the merchant account, for example, USD or CAD. See
   * <a href="https://developer.paysafe.com/en/support/reference-information/codes/#currency-codes">Currency Codes.</a>
   *  <br>
   * <b>Note:</b> The currencyCode specified in the Credit request must match the currencyCode specified in the Payment Handle request
   * from which the paymentHandleToken is taken.
   *
   * @return currencyCode
   */
  public CurrencyCode getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(CurrencyCode currencyCode) {
    this.currencyCode = currencyCode;
  }

  public StandaloneCredit customerIp(String customerIp) {
    this.customerIp = customerIp;
    return this;
  }

  /**
   * This is the customer's IP address.
   *
   * @return customerIp
   */
  public String getCustomerIp() {
    return customerIp;
  }

  public void setCustomerIp(String customerIp) {
    this.customerIp = customerIp;
  }

  public StandaloneCredit onHold(Boolean onHold) {
    this.onHold = onHold;
    return this;
  }

  /**
   * This parameter can be used by merchants to hold the SCT for additional checks on their end.
   *
   * @return onHold
   */
  public Boolean getOnHold() {
    return onHold;
  }

  public void setOnHold(Boolean onHold) {
    this.onHold = onHold;
  }

  public StandaloneCredit description(String description) {
    this.description = description;
    return this;
  }

  /**
   * This is a description of the transaction, provided by the merchant.
   *
   * @return description
   */
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public StandaloneCredit dupCheck(Boolean dupCheck) {
    this.dupCheck = dupCheck;
    return this;
  }

  /**
   * This validates that this request is not a duplicate. A duplicate request is when the merchantRefNum has already been used in a previous request
   * within the past 90 days.
   *
   * @return dupCheck
   */
  public Boolean getDupCheck() {
    return dupCheck;
  }

  public void setDupCheck(Boolean dupCheck) {
    this.dupCheck = dupCheck;
  }

  public StandaloneCredit merchantDescriptor(MerchantDescriptor merchantDescriptor) {
    this.merchantDescriptor = merchantDescriptor;
    return this;
  }

  /**
   * Details of the interac E-Transfer used for the transaction.
   *
   * @return interacEtransfer
   */
  public Interac getInteracEtransfer() {
    return interacEtransfer;
  }

  public void setInteracEtransfer(Interac interacEtransfer) {
    this.interacEtransfer = interacEtransfer;
  }

  /**
   * For Card payment method only. This is the merchant descriptor that will be displayed on the customer's card or bank statement.
   *
   * @return merchantDescriptor
   */
  public MerchantDescriptor getMerchantDescriptor() {
    return merchantDescriptor;
  }

  public void setMerchantDescriptor(MerchantDescriptor merchantDescriptor) {
    this.merchantDescriptor = merchantDescriptor;
  }

  public StandaloneCredit paymentFacilitator(PaymentFacilitator paymentFacilitator) {
    this.paymentFacilitator = paymentFacilitator;
    return this;
  }

  /**
   * Contains information about Payment facilitator.  <b>Note:</b> This object is only for Payment facilitator merchants.
   *
   * @return paymentFacilitator
   */
  public PaymentFacilitator getPaymentFacilitator() {
    return paymentFacilitator;
  }

  public void setPaymentFacilitator(PaymentFacilitator paymentFacilitator) {
    this.paymentFacilitator = paymentFacilitator;
  }

  public StandaloneCredit sender(Sender sender) {
    this.sender = sender;
    return this;
  }

  /**
   * The Sender is deemed to be the person or party who has the contractual relationship with the end customer.
   * <b>Note: </b> In case of Visa Direct with use cases Account to Account, Wallet transfer or Funds Transfer,
   * the sender name should be the same as the recipient name.
   *
   * @return sender
   */
  public Sender getSender() {
    return sender;
  }

  public void setSender(Sender sender) {
    this.sender = sender;
  }

  public StandaloneCredit sourceOfFunds(String sourceOfFunds) {
    this.sourceOfFunds = sourceOfFunds;
    return this;
  }

  /**
   * This field contains the information representing the payment transaction funding source. Possible values:
   * <ul>
   * <li> Credit </li>
   * <li> Debit </li>
   * <li> Prepaid </li>
   * <li> Cash </li>
   * <li> Deposit account </li>
   * <li> Credit account </li>
   * <li> Mobile money account </li>
   * </ul>
   *
   * @return sourceOfFunds
   */
  public String getSourceOfFunds() {
    return sourceOfFunds;
  }

  public void setSourceOfFunds(String sourceOfFunds) {
    this.sourceOfFunds = sourceOfFunds;
  }

  public StandaloneCredit id(String id) {
    this.id = id;
    return this;
  }

  /**
   * This is the ID returned in the response. This ID can be used for future associated requests.
   *
   * @return id
   */
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public String getCardSchemeTransactionId() {
    return cardSchemeTransactionId;
  }

  public void setCardSchemeTransactionId(String cardSchemeTransactionId) {
    this.cardSchemeTransactionId = cardSchemeTransactionId;
  }

  public StandaloneCredit paymentType(PaymentType paymentType) {
    this.paymentType = paymentType;
    return this;
  }

  /**
   * This is the payment type associated with the Payment Handle used for this request. <br>
   *
   * @return paymentType
   */
  public PaymentType getPaymentType() {
    return paymentType;
  }

  public void setPaymentType(PaymentType paymentType) {
    this.paymentType = paymentType;
  }

  public StandaloneCredit txnTime(String txnTime) {
    this.txnTime = txnTime;
    return this;
  }

  /**
   * This is the date and time the transaction was processed.
   *
   * @return txnTime
   */
  public String getTxnTime() {
    return txnTime;
  }

  public void setTxnTime(String txnTime) {
    this.txnTime = txnTime;
  }

  public StandaloneCredit billingDetails(BillingDetails billingDetails) {
    this.billingDetails = billingDetails;
    return this;
  }

  /**
   * Customer's billing details. Required if AVS (Address verification) is enabled. <br>
   * If included in the request, this will serve as the billing address for transaction processing.  <br>
   * Any billing details returned in Apple Pay Token by Apple Pay will be ignored.  <br>
   * 3DS Flow: It is recommended to send billingDetails to improve acceptance rate.
   *
   * @return billingDetails
   */
  public BillingDetails getBillingDetails() {
    return billingDetails;
  }

  public void setBillingDetails(BillingDetails billingDetails) {
    this.billingDetails = billingDetails;
  }

  public StandaloneCredit status(TransactionRequestStatus status) {
    this.status = status;
    return this;
  }

  /**
   * This is the status of the request.
   *
   * @return status
   */
  public TransactionRequestStatus getStatus() {
    return status;
  }

  public void setStatus(TransactionRequestStatus status) {
    this.status = status;
  }

  public StandaloneCredit returnLinks(List<ReturnLink> returnLinks) {
    this.returnLinks = returnLinks;
    return this;
  }

  /**
   * The URL endpoints to redirect the customer to after a redirection to an alternative payment or 3D Secure site.
   * You can customize the return URL based on the transaction status.
   *
   * @return returnLinks
   */
  public List<ReturnLink> getReturnLinks() {
    return returnLinks;
  }

  public void setReturnLinks(List<ReturnLink> returnLinks) {
    this.returnLinks = returnLinks;
  }

  public StandaloneCredit liveMode(Boolean liveMode) {
    this.liveMode = liveMode;
    return this;
  }

  /**
   * This flag indicates the environment.  - true - Production - false - Non-Production
   *
   * @return liveMode
   */
  public Boolean getLiveMode() {
    return liveMode;
  }

  public void setLiveMode(Boolean liveMode) {
    this.liveMode = liveMode;
  }

  public StandaloneCredit updatedTime(String updatedTime) {
    this.updatedTime = updatedTime;
    return this;
  }

  /**
   * ISO 8601 format (UTC). This is the date and time the resource was last updated.
   *
   * @return updatedTime
   */
  public String getUpdatedTime() {
    return updatedTime;
  }

  public void setUpdatedTime(String updatedTime) {
    this.updatedTime = updatedTime;
  }

  public StandaloneCredit statusTime(String statusTime) {
    this.statusTime = statusTime;
    return this;
  }

  /**
   * ISO 8601 format (UTC). This is the date and time the resource was last updated.
   *
   * @return statusTime
   */
  public String getStatusTime() {
    return statusTime;
  }

  public void setStatusTime(String statusTime) {
    this.statusTime = statusTime;
  }

  public StandaloneCredit profile(Profile profile) {
    this.profile = profile;
    return this;
  }

  /**
   * This is customer's profile details.
   *
   * @return profile
   */
  public Profile getProfile() {
    return profile;
  }

  public void setProfile(Profile profile) {
    this.profile = profile;
  }

  public StandaloneCredit transactionIntent(TransactionIntentCredit transactionIntent) {
    this.transactionIntent = transactionIntent;
    return this;
  }

  /**
   * Get transactionIntent
   *
   * @return transactionIntent
   */
  public TransactionIntentCredit getTransactionIntent() {
    return transactionIntent;
  }

  public void setTransactionIntent(TransactionIntentCredit transactionIntent) {
    this.transactionIntent = transactionIntent;
  }

  public StandaloneCredit gatewayReconciliationId(String gatewayReconciliationId) {
    this.gatewayReconciliationId = gatewayReconciliationId;
    return this;
  }

  /**
   * Transaction identifier that can be used to reconcile this transaction with the provider gateway.
   *
   * @return gatewayReconciliationId
   */
  public String getGatewayReconciliationId() {
    return gatewayReconciliationId;
  }

  public void setGatewayReconciliationId(String gatewayReconciliationId) {
    this.gatewayReconciliationId = gatewayReconciliationId;
  }

  public Card getCard() {
    return card;
  }

  public void setCard(Card card) {
    this.card = card;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StandaloneCredit standaloneCredit = (StandaloneCredit) o;
    return Objects.equals(this.merchantRefNum, standaloneCredit.merchantRefNum) &&
        Objects.equals(this.paymentHandleToken, standaloneCredit.paymentHandleToken) &&
        Objects.equals(this.amount, standaloneCredit.amount) &&
        Objects.equals(this.currencyCode, standaloneCredit.currencyCode) &&
        Objects.equals(this.customerIp, standaloneCredit.customerIp) &&
        Objects.equals(this.onHold, standaloneCredit.onHold) &&
        Objects.equals(this.description, standaloneCredit.description) &&
        Objects.equals(this.dupCheck, standaloneCredit.dupCheck) &&
        Objects.equals(this.merchantDescriptor, standaloneCredit.merchantDescriptor) &&
        Objects.equals(this.paymentFacilitator, standaloneCredit.paymentFacilitator) &&
        Objects.equals(this.sender, standaloneCredit.sender) &&
        Objects.equals(this.sourceOfFunds, standaloneCredit.sourceOfFunds) &&
        Objects.equals(this.id, standaloneCredit.id) &&
        Objects.equals(this.paymentType, standaloneCredit.paymentType) &&
        Objects.equals(this.txnTime, standaloneCredit.txnTime) &&
        Objects.equals(this.billingDetails, standaloneCredit.billingDetails) &&
        Objects.equals(this.status, standaloneCredit.status) &&
        Objects.equals(this.returnLinks, standaloneCredit.returnLinks) &&
        Objects.equals(this.liveMode, standaloneCredit.liveMode) &&
        Objects.equals(this.updatedTime, standaloneCredit.updatedTime) &&
        Objects.equals(this.statusTime, standaloneCredit.statusTime) &&
        Objects.equals(this.profile, standaloneCredit.profile) &&
        Objects.equals(this.transactionIntent, standaloneCredit.transactionIntent) &&
        Objects.equals(this.gatewayReconciliationId, standaloneCredit.gatewayReconciliationId) &&
        Objects.equals(this.interacEtransfer, standaloneCredit.interacEtransfer) &&
        Objects.equals(this.card, standaloneCredit.card);
  }

  @Override
  public int hashCode() {
    return Objects.hash(merchantRefNum, paymentHandleToken, amount, currencyCode, customerIp, onHold, description, dupCheck, merchantDescriptor,
        paymentFacilitator, sender, sourceOfFunds, id, paymentType, txnTime, billingDetails, status, returnLinks, liveMode, updatedTime, statusTime,
        profile, transactionIntent, gatewayReconciliationId, interacEtransfer, card, cardSchemeTransactionId);
  }

  @Override
  public String toString() {

    return "class StandaloneCredit {\n"
        + "    merchantRefNum: " + toIndentedString(merchantRefNum) + "\n"
        + "    paymentHandleToken: " + toIndentedString(paymentHandleToken) + "\n"
        + "    amount: " + toIndentedString(amount) + "\n"
        + "    currencyCode: " + toIndentedString(currencyCode) + "\n"
        + "    customerIp: " + toIndentedString(customerIp) + "\n"
        + "    onHold: " + toIndentedString(onHold) + "\n"
        + "    description: " + toIndentedString(description) + "\n"
        + "    dupCheck: " + toIndentedString(dupCheck) + "\n"
        + "    merchantDescriptor: " + toIndentedString(merchantDescriptor) + "\n"
        + "    paymentFacilitator: " + toIndentedString(paymentFacilitator) + "\n"
        + "    sender: " + toIndentedString(sender) + "\n"
        + "    sourceOfFunds: " + toIndentedString(sourceOfFunds) + "\n"
        + "    id: " + toIndentedString(id) + "\n"
        + "    paymentType: " + toIndentedString(paymentType) + "\n"
        + "    txnTime: " + toIndentedString(txnTime) + "\n"
        + "    billingDetails: " + toIndentedString(billingDetails) + "\n"
        + "    status: " + toIndentedString(status) + "\n"
        + "    returnLinks: " + toIndentedString(returnLinks) + "\n"
        + "    liveMode: " + toIndentedString(liveMode) + "\n"
        + "    updatedTime: " + toIndentedString(updatedTime) + "\n"
        + "    statusTime: " + toIndentedString(statusTime) + "\n"
        + "    profile: " + toIndentedString(profile) + "\n"
        + "    transactionIntent: " + toIndentedString(transactionIntent) + "\n"
        + "    gatewayReconciliationId: " + toIndentedString(gatewayReconciliationId) + "\n"
        + "    interacEtransfer: " + toIndentedString(interacEtransfer) + "\n"
        + "    cardSchemeTransactionId: " + toIndentedString(cardSchemeTransactionId) + "\n"
        + "    card: " + toIndentedString(card) + "\n"
        + "}";
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * {@code StandaloneCredit} builder static inner class.
   */
  public static final class Builder {
    private String merchantRefNum;
    private String paymentHandleToken;
    private Integer amount;
    private CurrencyCode currencyCode;
    private String customerIp;
    private Boolean onHold;
    private String description;
    private Boolean dupCheck;
    private MerchantDescriptor merchantDescriptor;
    private PaymentFacilitator paymentFacilitator;
    private Sender sender;
    private String sourceOfFunds;
    private String id;
    private String cardSchemeTransactionId;
    private PaymentType paymentType;
    private String txnTime;
    private BillingDetails billingDetails;
    private TransactionRequestStatus status;
    private List<ReturnLink> returnLinks;
    private Boolean liveMode;
    private String updatedTime;
    private String statusTime;
    private Profile profile;
    private TransactionIntentCredit transactionIntent;
    private String gatewayReconciliationId;
    private Card card;
    private Interac interacEtransfer;

    private Builder() {
    }

    /**
     * Sets the {@code merchantRefNum} and returns a reference to this Builder enabling method chaining.
     *
     * @param merchantRefNum the {@code merchantRefNum} to set
     * @return a reference to this Builder
     */
    public Builder merchantRefNum(String merchantRefNum) {
      this.merchantRefNum = merchantRefNum;
      return this;
    }

    /**
     * Sets the {@code paymentHandleToken} and returns a reference to this Builder enabling method chaining.
     *
     * @param paymentHandleToken the {@code paymentHandleToken} to set
     * @return a reference to this Builder
     */
    public Builder paymentHandleToken(String paymentHandleToken) {
      this.paymentHandleToken = paymentHandleToken;
      return this;
    }

    /**
     * Sets the {@code amount} and returns a reference to this Builder enabling method chaining.
     *
     * @param amount the {@code amount} to set
     * @return a reference to this Builder
     */
    public Builder amount(Integer amount) {
      this.amount = amount;
      return this;
    }

    /**
     * Sets the {@code currencyCode} and returns a reference to this Builder enabling method chaining.
     *
     * @param currencyCode the {@code currencyCode} to set
     * @return a reference to this Builder
     */
    public Builder currencyCode(CurrencyCode currencyCode) {
      this.currencyCode = currencyCode;
      return this;
    }

    /**
     * Sets the {@code customerIp} and returns a reference to this Builder enabling method chaining.
     *
     * @param customerIp the {@code customerIp} to set
     * @return a reference to this Builder
     */
    public Builder customerIp(String customerIp) {
      this.customerIp = customerIp;
      return this;
    }

    /**
     * Sets the {@code onHold} and returns a reference to this Builder enabling method chaining.
     *
     * @param onHold the {@code onHold} to set
     * @return a reference to this Builder
     */
    public Builder onHold(Boolean onHold) {
      this.onHold = onHold;
      return this;
    }

    /**
     * Sets the {@code description} and returns a reference to this Builder enabling method chaining.
     *
     * @param description the {@code description} to set
     * @return a reference to this Builder
     */
    public Builder description(String description) {
      this.description = description;
      return this;
    }

    /**
     * Sets the {@code dupCheck} and returns a reference to this Builder enabling method chaining.
     *
     * @param dupCheck the {@code dupCheck} to set
     * @return a reference to this Builder
     */
    public Builder dupCheck(Boolean dupCheck) {
      this.dupCheck = dupCheck;
      return this;
    }

    /**
     * Sets the {@code merchantDescriptor} and returns a reference to this Builder enabling method chaining.
     *
     * @param merchantDescriptor the {@code merchantDescriptor} to set
     * @return a reference to this Builder
     */
    public Builder merchantDescriptor(MerchantDescriptor merchantDescriptor) {
      this.merchantDescriptor = merchantDescriptor;
      return this;
    }

    /**
     * Sets the {@code paymentFacilitator} and returns a reference to this Builder enabling method chaining.
     *
     * @param paymentFacilitator the {@code paymentFacilitator} to set
     * @return a reference to this Builder
     */
    public Builder paymentFacilitator(PaymentFacilitator paymentFacilitator) {
      this.paymentFacilitator = paymentFacilitator;
      return this;
    }

    /**
     * Sets the {@code sender} and returns a reference to this Builder enabling method chaining.
     *
     * @param sender the {@code sender} to set
     * @return a reference to this Builder
     */
    public Builder sender(Sender sender) {
      this.sender = sender;
      return this;
    }

    /**
     * Sets the {@code sourceOfFunds} and returns a reference to this Builder enabling method chaining.
     *
     * @param sourceOfFunds the {@code sourceOfFunds} to set
     * @return a reference to this Builder
     */
    public Builder sourceOfFunds(String sourceOfFunds) {
      this.sourceOfFunds = sourceOfFunds;
      return this;
    }

    /**
     * Sets the {@code id} and returns a reference to this Builder enabling method chaining.
     *
     * @param id the {@code id} to set
     * @return a reference to this Builder
     */
    public Builder id(String id) {
      this.id = id;
      return this;
    }

    /**
     * Sets the {@code cardSchemeTransactionId} and returns a reference to this Builder enabling method chaining.
     *
     * @param cardSchemeTransactionId the {@code cardSchemeTransactionId} to set
     * @return a reference to this Builder
     */
    public Builder cardSchemeTransactionId(String cardSchemeTransactionId) {
      this.cardSchemeTransactionId = cardSchemeTransactionId;
      return this;
    }

    /**
     * Sets the {@code paymentType} and returns a reference to this Builder enabling method chaining.
     *
     * @param paymentType the {@code paymentType} to set
     * @return a reference to this Builder
     */
    public Builder paymentType(PaymentType paymentType) {
      this.paymentType = paymentType;
      return this;
    }

    /**
     * Sets the {@code txnTime} and returns a reference to this Builder enabling method chaining.
     *
     * @param txnTime the {@code txnTime} to set
     * @return a reference to this Builder
     */
    public Builder txnTime(String txnTime) {
      this.txnTime = txnTime;
      return this;
    }

    /**
     * Sets the {@code billingDetails} and returns a reference to this Builder enabling method chaining.
     *
     * @param billingDetails the {@code billingDetails} to set
     * @return a reference to this Builder
     */
    public Builder billingDetails(BillingDetails billingDetails) {
      this.billingDetails = billingDetails;
      return this;
    }

    /**
     * Sets the {@code status} and returns a reference to this Builder enabling method chaining.
     *
     * @param status the {@code status} to set
     * @return a reference to this Builder
     */
    public Builder status(TransactionRequestStatus status) {
      this.status = status;
      return this;
    }

    /**
     * Sets the {@code returnLinks} and returns a reference to this Builder enabling method chaining.
     *
     * @param returnLinks the {@code returnLinks} to set
     * @return a reference to this Builder
     */
    public Builder returnLinks(List<ReturnLink> returnLinks) {
      this.returnLinks = returnLinks;
      return this;
    }

    /**
     * Sets the {@code liveMode} and returns a reference to this Builder enabling method chaining.
     *
     * @param liveMode the {@code liveMode} to set
     * @return a reference to this Builder
     */
    public Builder liveMode(Boolean liveMode) {
      this.liveMode = liveMode;
      return this;
    }

    /**
     * Sets the {@code updatedTime} and returns a reference to this Builder enabling method chaining.
     *
     * @param updatedTime the {@code updatedTime} to set
     * @return a reference to this Builder
     */
    public Builder updatedTime(String updatedTime) {
      this.updatedTime = updatedTime;
      return this;
    }

    /**
     * Sets the {@code statusTime} and returns a reference to this Builder enabling method chaining.
     *
     * @param statusTime the {@code statusTime} to set
     * @return a reference to this Builder
     */
    public Builder statusTime(String statusTime) {
      this.statusTime = statusTime;
      return this;
    }

    /**
     * Sets the {@code profile} and returns a reference to this Builder enabling method chaining.
     *
     * @param profile the {@code profile} to set
     * @return a reference to this Builder
     */
    public Builder profile(Profile profile) {
      this.profile = profile;
      return this;
    }

    /**
     * Sets the {@code transactionIntent} and returns a reference to this Builder enabling method chaining.
     *
     * @param transactionIntent the {@code transactionIntent} to set
     * @return a reference to this Builder
     */
    public Builder transactionIntent(TransactionIntentCredit transactionIntent) {
      this.transactionIntent = transactionIntent;
      return this;
    }

    /**
     * Sets the {@code gatewayReconciliationId} and returns a reference to this Builder enabling method chaining.
     *
     * @param gatewayReconciliationId the {@code gatewayReconciliationId} to set
     * @return a reference to this Builder
     */
    public Builder gatewayReconciliationId(String gatewayReconciliationId) {
      this.gatewayReconciliationId = gatewayReconciliationId;
      return this;
    }

    /**
     * Sets the {@code card} and returns a reference to this Builder enabling method chaining.
     *
     * @param card the {@code card} to set
     * @return a reference to this Builder
     */
    public Builder card(Card card) {
      this.card = card;
      return this;
    }

    /**
     * Sets the {@code interacEtransfer} and returns a reference to this Builder enabling method chaining.
     *
     * @param val the {@code interacEtransfer} to set
     * @return a reference to this Builder
     */
    public Builder interacEtransfer(final Interac val) {
      interacEtransfer = val;
      return this;
    }

    /**
     * Returns a {@code StandaloneCredit} built from the parameters previously set.
     *
     * @return a {@code StandaloneCredit} built with parameters of this {@code StandaloneCredit.Builder}
     */
    public StandaloneCredit build() {
      return new StandaloneCredit(this);
    }
  }
}