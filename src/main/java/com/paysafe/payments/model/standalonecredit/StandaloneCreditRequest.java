// All Rights Reserved, Copyright Â© Paysafe Holdings UK Limited 2025. For more information see LICENSE

package com.paysafe.payments.model.standalonecredit;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.paysafe.payments.model.card.MerchantDescriptor;
import com.paysafe.payments.model.common.enums.CurrencyCode;
import com.paysafe.payments.model.common.paymentfacilitator.PaymentFacilitator;

/**
 * StandaloneCreditRequest
 */
public class StandaloneCreditRequest {

  @JsonProperty("merchantRefNum")
  private String merchantRefNum;
  @JsonProperty("paymentHandleToken")
  private String paymentHandleToken;
  @JsonProperty("amount")
  private Integer amount;
  @JsonProperty("currencyCode")
  private CurrencyCode currencyCode;
  @JsonProperty("customerIp")
  private String customerIp;
  @JsonProperty("onHold")
  private Boolean onHold = true;
  @JsonProperty("description")
  private String description;
  @JsonProperty("dupCheck")
  private Boolean dupCheck = true;
  @JsonProperty("merchantDescriptor")
  private MerchantDescriptor merchantDescriptor;
  @JsonProperty("paymentFacilitator")
  private PaymentFacilitator paymentFacilitator;
  @JsonProperty("sender")
  private Sender sender;
  @JsonProperty("sourceOfFunds")
  private String sourceOfFunds;

  private Map<String, Object> additionalParameters;

  public StandaloneCreditRequest() {
    super();
  }

  private StandaloneCreditRequest(final Builder builder) {
    setMerchantRefNum(builder.merchantRefNum);
    setPaymentHandleToken(builder.paymentHandleToken);
    setAmount(builder.amount);
    setCurrencyCode(builder.currencyCode);
    setCustomerIp(builder.customerIp);
    setOnHold(builder.onHold);
    setDescription(builder.description);
    setDupCheck(builder.dupCheck);
    setMerchantDescriptor(builder.merchantDescriptor);
    setPaymentFacilitator(builder.paymentFacilitator);
    setSender(builder.sender);
    setSourceOfFunds(builder.sourceOfFunds);
    setAdditionalParameters(builder.additionalParameters);
  }

  public static Builder builder() {
    return new Builder();
  }

  public StandaloneCreditRequest merchantRefNum(String merchantRefNum) {
    this.merchantRefNum = merchantRefNum;
    return this;
  }

  /**
   * This is the merchant reference number created by  the merchant and submitted as part of the request. It must be unique for each request.
   *
   * @return merchantRefNum
   */
  public String getMerchantRefNum() {
    return merchantRefNum;
  }

  public void setMerchantRefNum(String merchantRefNum) {
    this.merchantRefNum = merchantRefNum;
  }

  public StandaloneCreditRequest paymentHandleToken(String paymentHandleToken) {
    this.paymentHandleToken = paymentHandleToken;
    return this;
  }

  /**
   * This is the payment token generated by Paysafe that will be used for the request.
   *
   * @return paymentHandleToken
   */
  public String getPaymentHandleToken() {
    return paymentHandleToken;
  }

  public void setPaymentHandleToken(String paymentHandleToken) {
    this.paymentHandleToken = paymentHandleToken;
  }

  public StandaloneCreditRequest amount(Integer amount) {
    this.amount = amount;
    return this;
  }

  /**
   * This is the amount of the request, in minor units. For example, to process US $10.99, this value  should be 1099.
   * <b>Note:</b> The amount specified in the Credit request
   * must match the amount specified in the Payment  Handle request from which the paymentHandleToken is taken.
   *
   * @return amount
   */
  public Integer getAmount() {
    return amount;
  }

  public void setAmount(Integer amount) {
    this.amount = amount;
  }

  public StandaloneCreditRequest currencyCode(CurrencyCode currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * This is the currency of the merchant account, for example, USD or CAD.
   * See <a href="https://developer.paysafe.com/en/support/reference-information/codes/#currency-codes">Currency Codes.</a>
   *  <br>
   * <b>Note:</b> The currencyCode specified in the Credit request must match the currencyCode specified in the Payment Handle request
   * from which the paymentHandleToken is taken.
   *
   * @return currencyCode
   */
  public CurrencyCode getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(CurrencyCode currencyCode) {
    this.currencyCode = currencyCode;
  }

  public StandaloneCreditRequest customerIp(String customerIp) {
    this.customerIp = customerIp;
    return this;
  }

  /**
   * This is the customer's IP address.
   *
   * @return customerIp
   */
  public String getCustomerIp() {
    return customerIp;
  }

  public void setCustomerIp(String customerIp) {
    this.customerIp = customerIp;
  }

  public StandaloneCreditRequest onHold(Boolean onHold) {
    this.onHold = onHold;
    return this;
  }

  /**
   * This parameter can be used by merchants to hold the SCT for additional checks on their end.
   *
   * @return onHold
   */
  public Boolean getOnHold() {
    return onHold;
  }

  public void setOnHold(Boolean onHold) {
    this.onHold = onHold;
  }

  public StandaloneCreditRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * This is a description of the transaction, provided by the merchant.
   *
   * @return description
   */
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public StandaloneCreditRequest dupCheck(Boolean dupCheck) {
    this.dupCheck = dupCheck;
    return this;
  }

  /**
   * This validates that this request is not a duplicate.
   * A duplicate request is when the merchantRefNum has already been used in a previous request within the past 90 days.
   *
   * @return dupCheck
   */
  public Boolean getDupCheck() {
    return dupCheck;
  }

  public void setDupCheck(Boolean dupCheck) {
    this.dupCheck = dupCheck;
  }

  public StandaloneCreditRequest merchantDescriptor(MerchantDescriptor merchantDescriptor) {
    this.merchantDescriptor = merchantDescriptor;
    return this;
  }

  /**
   * For Card payment method only. This is the merchant descriptor that will be displayed on the customer's card or bank statement.
   *
   * @return merchantDescriptor
   */
  public MerchantDescriptor getMerchantDescriptor() {
    return merchantDescriptor;
  }

  public void setMerchantDescriptor(MerchantDescriptor merchantDescriptor) {
    this.merchantDescriptor = merchantDescriptor;
  }

  public StandaloneCreditRequest paymentFacilitator(PaymentFacilitator paymentFacilitator) {
    this.paymentFacilitator = paymentFacilitator;
    return this;
  }

  /**
   * Contains information about Payment facilitator.  <b>Note:</b> This object is only for Payment facilitator merchants.
   *
   * @return paymentFacilitator
   */
  public PaymentFacilitator getPaymentFacilitator() {
    return paymentFacilitator;
  }

  public void setPaymentFacilitator(PaymentFacilitator paymentFacilitator) {
    this.paymentFacilitator = paymentFacilitator;
  }

  public StandaloneCreditRequest sender(Sender sender) {
    this.sender = sender;
    return this;
  }

  /**
   * The sender is deemed to be the person or party who has the contractual relationship with the the end customer. <br>
   * In case of Visa Direct with use cases Account to Account, Wallet transfer or Funds Transfer, the sender name should be the same as the recipient name.
   *
   * @return sender
   */
  public Sender getSender() {
    return sender;
  }

  public void setSender(Sender sender) {
    this.sender = sender;
  }

  public StandaloneCreditRequest sourceOfFunds(String sourceOfFunds) {
    this.sourceOfFunds = sourceOfFunds;
    return this;
  }

  /**
   * This field contains the information representing the payment transaction funding source.
   *
   * @return sourceOfFunds
   */
  public String getSourceOfFunds() {
    return sourceOfFunds;
  }

  public void setSourceOfFunds(String sourceOfFunds) {
    this.sourceOfFunds = sourceOfFunds;
  }

  /**
   * This map holds additional parameters that can be used for features not available in this client library.
   * During serialization, each key-value pair is treated as if the key were a top-level field in the serialized object,
   * i.e. <code>{"merchantRefNum" : "uuid", "additionalParameter1" : 100, "additionalParameter2" : "string" }</code> .
   *
   * @return additionalParameters
   */
  @JsonAnyGetter
  public Map<String, Object> getAdditionalParameters() {
    return additionalParameters;
  }

  public void setAdditionalParameters(Map<String, Object> additionalParameters) {
    this.additionalParameters = additionalParameters;
  }

  public void addAdditionalParameter(String key, Object value) {
    if (additionalParameters == null) {
      additionalParameters = new HashMap<>();
    }
    additionalParameters.put(key, value);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StandaloneCreditRequest standaloneCreditRequest = (StandaloneCreditRequest) o;
    return Objects.equals(this.merchantRefNum, standaloneCreditRequest.merchantRefNum) &&
        Objects.equals(this.paymentHandleToken, standaloneCreditRequest.paymentHandleToken) &&
        Objects.equals(this.amount, standaloneCreditRequest.amount) &&
        Objects.equals(this.currencyCode, standaloneCreditRequest.currencyCode) &&
        Objects.equals(this.customerIp, standaloneCreditRequest.customerIp) &&
        Objects.equals(this.onHold, standaloneCreditRequest.onHold) &&
        Objects.equals(this.description, standaloneCreditRequest.description) &&
        Objects.equals(this.dupCheck, standaloneCreditRequest.dupCheck) &&
        Objects.equals(this.merchantDescriptor, standaloneCreditRequest.merchantDescriptor) &&
        Objects.equals(this.paymentFacilitator, standaloneCreditRequest.paymentFacilitator) &&
        Objects.equals(this.sender, standaloneCreditRequest.sender) &&
        Objects.equals(this.sourceOfFunds, standaloneCreditRequest.sourceOfFunds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(merchantRefNum, paymentHandleToken, amount, currencyCode, customerIp, onHold, description, dupCheck, merchantDescriptor,
        paymentFacilitator, sender, sourceOfFunds);
  }

  @Override
  public String toString() {

    return "class StandaloneCreditRequest {\n"
        + "    merchantRefNum: " + toIndentedString(merchantRefNum) + "\n"
        + "    paymentHandleToken: " + toIndentedString(paymentHandleToken) + "\n"
        + "    amount: " + toIndentedString(amount) + "\n"
        + "    currencyCode: " + toIndentedString(currencyCode) + "\n"
        + "    customerIp: " + toIndentedString(customerIp) + "\n"
        + "    onHold: " + toIndentedString(onHold) + "\n"
        + "    description: " + toIndentedString(description) + "\n"
        + "    dupCheck: " + toIndentedString(dupCheck) + "\n"
        + "    merchantDescriptor: " + toIndentedString(merchantDescriptor) + "\n"
        + "    paymentFacilitator: " + toIndentedString(paymentFacilitator) + "\n"
        + "    sender: " + toIndentedString(sender) + "\n"
        + "    sourceOfFunds: " + toIndentedString(sourceOfFunds) + "\n"
        + "}";
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * {@code StandaloneCreditRequest} builder static inner class.
   */
  public static final class Builder {
    private String merchantRefNum;
    private String paymentHandleToken;
    private Integer amount;
    private CurrencyCode currencyCode;
    private String customerIp;
    private Boolean onHold;
    private String description;
    private Boolean dupCheck;
    private MerchantDescriptor merchantDescriptor;
    private PaymentFacilitator paymentFacilitator;
    private Sender sender;
    private String sourceOfFunds;
    private Map<String, Object> additionalParameters;

    private Builder() {
    }

    /**
     * Sets the {@code merchantRefNum} and returns a reference to this Builder enabling method chaining.
     *
     * @param merchantRefNum the {@code merchantRefNum} to set
     * @return a reference to this Builder
     */
    public Builder merchantRefNum(String merchantRefNum) {
      this.merchantRefNum = merchantRefNum;
      return this;
    }

    /**
     * Sets the {@code paymentHandleToken} and returns a reference to this Builder enabling method chaining.
     *
     * @param paymentHandleToken the {@code paymentHandleToken} to set
     * @return a reference to this Builder
     */
    public Builder paymentHandleToken(String paymentHandleToken) {
      this.paymentHandleToken = paymentHandleToken;
      return this;
    }

    /**
     * Sets the {@code amount} and returns a reference to this Builder enabling method chaining.
     *
     * @param amount the {@code amount} to set
     * @return a reference to this Builder
     */
    public Builder amount(Integer amount) {
      this.amount = amount;
      return this;
    }

    /**
     * Sets the {@code currencyCode} and returns a reference to this Builder enabling method chaining.
     *
     * @param currencyCode the {@code currencyCode} to set
     * @return a reference to this Builder
     */
    public Builder currencyCode(CurrencyCode currencyCode) {
      this.currencyCode = currencyCode;
      return this;
    }

    /**
     * Sets the {@code customerIp} and returns a reference to this Builder enabling method chaining.
     *
     * @param val the {@code customerIp} to set
     * @return a reference to this Builder
     */
    public Builder customerIp(final String val) {
      customerIp = val;
      return this;
    }

    /**
     * Sets the {@code onHold} and returns a reference to this Builder enabling method chaining.
     *
     * @param onHold the {@code onHold} to set
     * @return a reference to this Builder
     */
    public Builder onHold(Boolean onHold) {
      this.onHold = onHold;
      return this;
    }

    /**
     * Sets the {@code description} and returns a reference to this Builder enabling method chaining.
     *
     * @param description the {@code description} to set
     * @return a reference to this Builder
     */
    public Builder description(String description) {
      this.description = description;
      return this;
    }

    /**
     * Sets the {@code dupCheck} and returns a reference to this Builder enabling method chaining.
     *
     * @param dupCheck the {@code dupCheck} to set
     * @return a reference to this Builder
     */
    public Builder dupCheck(Boolean dupCheck) {
      this.dupCheck = dupCheck;
      return this;
    }

    /**
     * Sets the {@code merchantDescriptor} and returns a reference to this Builder enabling method chaining.
     *
     * @param merchantDescriptor the {@code merchantDescriptor} to set
     * @return a reference to this Builder
     */
    public Builder merchantDescriptor(MerchantDescriptor merchantDescriptor) {
      this.merchantDescriptor = merchantDescriptor;
      return this;
    }

    /**
     * Sets the {@code paymentFacilitator} and returns a reference to this Builder enabling method chaining.
     *
     * @param paymentFacilitator the {@code paymentFacilitator} to set
     * @return a reference to this Builder
     */
    public Builder paymentFacilitator(PaymentFacilitator paymentFacilitator) {
      this.paymentFacilitator = paymentFacilitator;
      return this;
    }

    /**
     * Sets the {@code sender} and returns a reference to this Builder enabling method chaining.
     *
     * @param sender the {@code sender} to set
     * @return a reference to this Builder
     */
    public Builder sender(Sender sender) {
      this.sender = sender;
      return this;
    }

    /**
     * Sets the {@code sourceOfFunds} and returns a reference to this Builder enabling method chaining.
     *
     * @param sourceOfFunds the {@code sourceOfFunds} to set
     * @return a reference to this Builder
     */
    public Builder sourceOfFunds(String sourceOfFunds) {
      this.sourceOfFunds = sourceOfFunds;
      return this;
    }

    /**
     * Inserts one key/value pair to additionalParameters and returns a reference to this Builder enabling method chaining.
     *
     * @return a reference to this Builder
     */
    public Builder putAdditionalParameter(String key, Object value) {
      if (this.additionalParameters == null) {
        this.additionalParameters = new HashMap<>();
      }
      this.additionalParameters.put(key, value);
      return this;
    }

    /**
     * Inserts provided key/value pairs to additionalParameters and returns a reference to this Builder enabling method chaining.
     *
     * @return a reference to this Builder
     */
    public Builder putAllAdditionalParameters(Map<String, Object> additionalParameters) {
      if (this.additionalParameters == null) {
        this.additionalParameters = new HashMap<>();
      }
      this.additionalParameters.putAll(additionalParameters);
      return this;
    }

    /**
     * Sets the {@code additionalParameters} and returns a reference to this Builder enabling method chaining.
     *
     * @param additionalParameters the {@code additionalParameters} to set
     * @return a reference to this Builder
     */
    public Builder additionalParameters(Map<String, Object> additionalParameters) {
      this.additionalParameters = additionalParameters;
      return this;
    }

    /**
     * Returns a {@code StandaloneCreditRequest} built from the parameters previously set.
     *
     * @return a {@code StandaloneCreditRequest} built with parameters of this {@code StandaloneCreditRequest.Builder}
     */
    public StandaloneCreditRequest build() {
      return new StandaloneCreditRequest(this);
    }
  }
}

