// All Rights Reserved, Copyright Â© Paysafe Holdings UK Limited 2025. For more information see LICENSE

package com.paysafe.payments.model.verification;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.paysafe.payments.model.BaseApiResponse;
import com.paysafe.payments.model.card.threeds.Authentication;
import com.paysafe.payments.model.common.GatewayResponse;
import com.paysafe.payments.model.common.error.Error;
import com.paysafe.payments.model.common.paymentfacilitator.PaymentFacilitator;
import com.paysafe.payments.model.common.profile.Profile;
import com.paysafe.payments.model.verification.enums.VerificationPaymentType;
import com.paysafe.payments.model.verification.enums.VerificationStatus;

/**
 * Contains details of a verification for a specific payment type.
 */
public class Verification extends BaseApiResponse {

  @JsonProperty("merchantRefNum")
  private String merchantRefNum;
  @JsonProperty("paymentHandleToken")
  private String paymentHandleToken;
  @JsonProperty("customerIp")
  private String customerIp;
  @JsonProperty("dupCheck")
  private Boolean dupCheck = true;
  @JsonProperty("description")
  private String description;
  @JsonProperty("paymentFacilitator")
  private PaymentFacilitator paymentFacilitator;
  @JsonProperty("id")
  private String id;
  @JsonProperty("txnTime")
  private String txnTime;
  @JsonProperty("paymentType")
  private VerificationPaymentType paymentType;
  @JsonProperty("status")
  private VerificationStatus status;
  @JsonProperty("currencyCode")
  private String currencyCode;
  @JsonProperty("riskReasonCode")
  private List<Integer> riskReasonCode = null;
  @JsonProperty("gatewayResponse")
  private GatewayResponse gatewayResponse;
  @JsonProperty("profile")
  private Profile profile;
  @JsonProperty("authentication")
  private Authentication authentication;

  public Verification() {
    super();
  }

  private Verification(final Builder builder) {
    setError(builder.error);
    setMerchantRefNum(builder.merchantRefNum);
    setPaymentHandleToken(builder.paymentHandleToken);
    setCustomerIp(builder.customerIp);
    setDupCheck(builder.dupCheck);
    setDescription(builder.description);
    setPaymentFacilitator(builder.paymentFacilitator);
    setId(builder.id);
    setTxnTime(builder.txnTime);
    setPaymentType(builder.paymentType);
    setStatus(builder.status);
    setCurrencyCode(builder.currencyCode);
    setRiskReasonCode(builder.riskReasonCode);
    setGatewayResponse(builder.gatewayResponse);
    setProfile(builder.profile);
    setAuthentication(builder.authentication);
  }

  public static Builder builder() {
    return new Builder();
  }

  public Verification merchantRefNum(String merchantRefNum) {
    this.merchantRefNum = merchantRefNum;
    return this;
  }

  /**
   * This is the merchant reference number created by the merchant and submitted as part of the request.
   *
   * @return merchantRefNum
   */
  public String getMerchantRefNum() {
    return merchantRefNum;
  }

  public void setMerchantRefNum(String merchantRefNum) {
    this.merchantRefNum = merchantRefNum;
  }

  public Verification paymentHandleToken(String paymentHandleToken) {
    this.paymentHandleToken = paymentHandleToken;
    return this;
  }

  /**
   * This is the payment token generated by Paysafe that will be used for the Verification request.
   *
   * @return paymentHandleToken
   */
  public String getPaymentHandleToken() {
    return paymentHandleToken;
  }

  public void setPaymentHandleToken(String paymentHandleToken) {
    this.paymentHandleToken = paymentHandleToken;
  }

  public Verification customerIp(String customerIp) {
    this.customerIp = customerIp;
    return this;
  }

  /**
   * This is the customer's IP address.
   *
   * @return customerIp
   */
  public String getCustomerIp() {
    return customerIp;
  }

  public void setCustomerIp(String customerIp) {
    this.customerIp = customerIp;
  }

  public Verification dupCheck(Boolean dupCheck) {
    this.dupCheck = dupCheck;
    return this;
  }

  /**
   * This validates that this request is not a duplicate. A request is considered a duplicate if the merchantRefNum has already been used in
   * a previous request within the past 90 days.
   *
   * @return dupCheck
   */
  public Boolean getDupCheck() {
    return dupCheck;
  }

  public void setDupCheck(Boolean dupCheck) {
    this.dupCheck = dupCheck;
  }

  public Verification description(String description) {
    this.description = description;
    return this;
  }

  /**
   * This is a description of the transaction, provided by the merchant.
   *
   * @return description
   */
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Verification paymentFacilitator(PaymentFacilitator paymentFacilitator) {
    this.paymentFacilitator = paymentFacilitator;
    return this;
  }

  /**
   * Contains information about Payment facilitator.  <b>Note:</b> This object is only for Payment facilitator merchants.
   *
   * @return paymentFacilitator
   */
  public PaymentFacilitator getPaymentFacilitator() {
    return paymentFacilitator;
  }

  public void setPaymentFacilitator(PaymentFacilitator paymentFacilitator) {
    this.paymentFacilitator = paymentFacilitator;
  }

  public Verification id(String id) {
    this.id = id;
    return this;
  }

  /**
   * This is the ID returned in the response. This ID can be used for future associated requests, e,g., looking up the Verification.
   *
   * @return id
   */
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Verification txnTime(String txnTime) {
    this.txnTime = txnTime;
    return this;
  }

  /**
   * This is the date and time the transaction was processed.
   *
   * @return txnTime
   */
  public String getTxnTime() {
    return txnTime;
  }

  public void setTxnTime(String txnTime) {
    this.txnTime = txnTime;
  }

  public Verification paymentType(VerificationPaymentType paymentType) {
    this.paymentType = paymentType;
    return this;
  }

  /**
   * This is the payment type associated with the Payment Handle used for this request.
   *
   * @return paymentType
   */
  public VerificationPaymentType getPaymentType() {
    return paymentType;
  }

  public void setPaymentType(VerificationPaymentType paymentType) {
    this.paymentType = paymentType;
  }

  public Verification status(VerificationStatus status) {
    this.status = status;
    return this;
  }

  /**
   * This is the status of the transaction request.
   * Possible values are:
   * <ul>
   * <li> RECEIVED - A verification request was received from merchant, but it has not yet been sent to downstream gateway.</li>
   * <li> ERROR - The verification has errored - failed for non-business reason (non http status 402 error).</li>
   * <li> FAILED - The verification has failed and the downstream gateway has returned an error (http status 402) for some business reason.</li>
   * <li> COMPLETED - The verification was completed successfully.</li>
   * </ul>
   * @return status
   */
  public VerificationStatus getStatus() {
    return status;
  }

  public void setStatus(VerificationStatus status) {
    this.status = status;
  }

  public Verification currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * This is the currency of the merchant account, e.g., USD or CAD. For a full list, see
   * (<a href="https://developer.paysafe.com/en/support/reference-information/codes/#currency-codes">Currency Codes</a>).
   *
   * @return currencyCode
   */
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }

  public Verification riskReasonCode(List<Integer> riskReasonCode) {
    this.riskReasonCode = riskReasonCode;
    return this;
  }

  public Verification addRiskReasonCodeItem(Integer riskReasonCodeItem) {
    if (this.riskReasonCode == null) {
      this.riskReasonCode = new ArrayList<>();
    }
    this.riskReasonCode.add(riskReasonCodeItem);
    return this;
  }

  public Verification removeRiskReasonCodeItem(Integer riskReasonCodeItem) {
    if (riskReasonCodeItem != null && this.riskReasonCode != null) {
      this.riskReasonCode.remove(riskReasonCodeItem);
    }

    return this;
  }

  /**
   * An array of integers is returned, displaying the detailed risk reason codes if your transaction was declined.
   * It is returned only if your account is configured accordingly.
   *
   * @return riskReasonCode
   */
  public List<Integer> getRiskReasonCode() {
    return riskReasonCode;
  }

  public void setRiskReasonCode(List<Integer> riskReasonCode) {
    this.riskReasonCode = riskReasonCode;
  }

  public Verification gatewayResponse(GatewayResponse gatewayResponse) {
    this.gatewayResponse = gatewayResponse;
    return this;
  }

  /**
   * This is the read-only raw response returned by an acquirer or PSP.
   *
   * @return gatewayResponse
   */
  public GatewayResponse getGatewayResponse() {
    return gatewayResponse;
  }

  public void setGatewayResponse(GatewayResponse gatewayResponse) {
    this.gatewayResponse = gatewayResponse;
  }

  public Verification profile(Profile profile) {
    this.profile = profile;
    return this;
  }

  /**
   * This is customer's profile details.
   *
   * @return profile
   */
  public Profile getProfile() {
    return profile;
  }

  public void setProfile(Profile profile) {
    this.profile = profile;
  }

  public Verification authentication(Authentication authentication) {
    this.authentication = authentication;
    return this;
  }

  /**
   * 3D Secure authentication details.
   *
   * @return authentication
   */
  public Authentication getAuthentication() {
    return authentication;
  }

  public void setAuthentication(Authentication authentication) {
    this.authentication = authentication;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Verification verification = (Verification) o;
    return Objects.equals(this.merchantRefNum, verification.merchantRefNum) &&
        Objects.equals(this.paymentHandleToken, verification.paymentHandleToken) &&
        Objects.equals(this.customerIp, verification.customerIp) &&
        Objects.equals(this.dupCheck, verification.dupCheck) &&
        Objects.equals(this.description, verification.description) &&
        Objects.equals(this.paymentFacilitator, verification.paymentFacilitator) &&
        Objects.equals(this.id, verification.id) &&
        Objects.equals(this.txnTime, verification.txnTime) &&
        Objects.equals(this.paymentType, verification.paymentType) &&
        Objects.equals(this.status, verification.status) &&
        Objects.equals(this.currencyCode, verification.currencyCode) &&
        Objects.equals(this.riskReasonCode, verification.riskReasonCode) &&
        Objects.equals(this.gatewayResponse, verification.gatewayResponse) &&
        Objects.equals(this.profile, verification.profile) &&
        Objects.equals(this.authentication, verification.authentication) &&
        Objects.equals(this.getError(), verification.getError());
  }

  @Override
  public int hashCode() {
    return Objects.hash(merchantRefNum, paymentHandleToken, customerIp, dupCheck, description, paymentFacilitator, id, txnTime, paymentType, status,
        currencyCode, riskReasonCode, gatewayResponse, profile, authentication, getError());
  }

  @Override
  public String toString() {

    return "class Verification {\n"
        + "    merchantRefNum: " + toIndentedString(merchantRefNum) + "\n"
        + "    paymentHandleToken: " + toIndentedString(paymentHandleToken) + "\n"
        + "    customerIp: " + toIndentedString(customerIp) + "\n"
        + "    dupCheck: " + toIndentedString(dupCheck) + "\n"
        + "    description: " + toIndentedString(description) + "\n"
        + "    paymentFacilitator: " + toIndentedString(paymentFacilitator) + "\n"
        + "    id: " + toIndentedString(id) + "\n"
        + "    txnTime: " + toIndentedString(txnTime) + "\n"
        + "    paymentType: " + toIndentedString(paymentType) + "\n"
        + "    status: " + toIndentedString(status) + "\n"
        + "    currencyCode: " + toIndentedString(currencyCode) + "\n"
        + "    riskReasonCode: " + toIndentedString(riskReasonCode) + "\n"
        + "    gatewayResponse: " + toIndentedString(gatewayResponse) + "\n"
        + "    profile: " + toIndentedString(profile) + "\n"
        + "    authentication: " + toIndentedString(authentication) + "\n"
        + "    error: " + toIndentedString(getError()) + "\n"
        + "}";
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * {@code Verification} builder static inner class.
   */
  public static final class Builder {
    private String merchantRefNum;
    private String paymentHandleToken;
    private String customerIp;
    private Boolean dupCheck;
    private String description;
    private PaymentFacilitator paymentFacilitator;
    private String id;
    private String txnTime;
    private VerificationPaymentType paymentType;
    private VerificationStatus status;
    private String currencyCode;
    private List<Integer> riskReasonCode;
    private GatewayResponse gatewayResponse;
    private Profile profile;
    private Authentication authentication;
    private Error error;

    private Builder() {
    }

    /**
     * Sets the {@code merchantRefNum} and returns a reference to this Builder enabling method chaining.
     *
     * @param merchantRefNum the {@code merchantRefNum} to set
     * @return a reference to this Builder
     */
    public Builder merchantRefNum(String merchantRefNum) {
      this.merchantRefNum = merchantRefNum;
      return this;
    }

    /**
     * Sets the {@code paymentHandleToken} and returns a reference to this Builder enabling method chaining.
     *
     * @param paymentHandleToken the {@code paymentHandleToken} to set
     * @return a reference to this Builder
     */
    public Builder paymentHandleToken(String paymentHandleToken) {
      this.paymentHandleToken = paymentHandleToken;
      return this;
    }

    /**
     * Sets the {@code customerIp} and returns a reference to this Builder enabling method chaining.
     *
     * @param customerIp the {@code customerIp} to set
     * @return a reference to this Builder
     */
    public Builder customerIp(String customerIp) {
      this.customerIp = customerIp;
      return this;
    }

    /**
     * Sets the {@code dupCheck} and returns a reference to this Builder enabling method chaining.
     *
     * @param dupCheck the {@code dupCheck} to set
     * @return a reference to this Builder
     */
    public Builder dupCheck(Boolean dupCheck) {
      this.dupCheck = dupCheck;
      return this;
    }

    /**
     * Sets the {@code description} and returns a reference to this Builder enabling method chaining.
     *
     * @param description the {@code description} to set
     * @return a reference to this Builder
     */
    public Builder description(String description) {
      this.description = description;
      return this;
    }

    /**
     * Sets the {@code paymentFacilitator} and returns a reference to this Builder enabling method chaining.
     *
     * @param paymentFacilitator the {@code paymentFacilitator} to set
     * @return a reference to this Builder
     */
    public Builder paymentFacilitator(PaymentFacilitator paymentFacilitator) {
      this.paymentFacilitator = paymentFacilitator;
      return this;
    }

    /**
     * Sets the {@code id} and returns a reference to this Builder enabling method chaining.
     *
     * @param id the {@code id} to set
     * @return a reference to this Builder
     */
    public Builder id(String id) {
      this.id = id;
      return this;
    }

    /**
     * Sets the {@code txnTime} and returns a reference to this Builder enabling method chaining.
     *
     * @param txnTime the {@code txnTime} to set
     * @return a reference to this Builder
     */
    public Builder txnTime(String txnTime) {
      this.txnTime = txnTime;
      return this;
    }

    /**
     * Sets the {@code paymentType} and returns a reference to this Builder enabling method chaining.
     *
     * @param paymentType the {@code paymentType} to set
     * @return a reference to this Builder
     */
    public Builder paymentType(VerificationPaymentType paymentType) {
      this.paymentType = paymentType;
      return this;
    }

    /**
     * Sets the {@code status} and returns a reference to this Builder enabling method chaining.
     *
     * @param status the {@code status} to set
     * @return a reference to this Builder
     */
    public Builder status(VerificationStatus status) {
      this.status = status;
      return this;
    }

    /**
     * Sets the {@code currencyCode} and returns a reference to this Builder enabling method chaining.
     *
     * @param currencyCode the {@code currencyCode} to set
     * @return a reference to this Builder
     */
    public Builder currencyCode(String currencyCode) {
      this.currencyCode = currencyCode;
      return this;
    }

    /**
     * Sets the {@code riskReasonCode} and returns a reference to this Builder enabling method chaining.
     *
     * @param riskReasonCode the {@code riskReasonCode} to set
     * @return a reference to this Builder
     */
    public Builder riskReasonCode(List<Integer> riskReasonCode) {
      this.riskReasonCode = riskReasonCode;
      return this;
    }

    /**
     * Sets the {@code gatewayResponse} and returns a reference to this Builder enabling method chaining.
     *
     * @param gatewayResponse the {@code gatewayResponse} to set
     * @return a reference to this Builder
     */
    public Builder gatewayResponse(GatewayResponse gatewayResponse) {
      this.gatewayResponse = gatewayResponse;
      return this;
    }

    /**
     * Sets the {@code profile} and returns a reference to this Builder enabling method chaining.
     *
     * @param profile the {@code profile} to set
     * @return a reference to this Builder
     */
    public Builder profile(Profile profile) {
      this.profile = profile;
      return this;
    }

    /**
     * Sets the {@code authentication} and returns a reference to this Builder enabling method chaining.
     *
     * @param authentication the {@code authentication} to set
     * @return a reference to this Builder
     */
    public Builder authentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    /**
     * Sets the {@code error} and returns a reference to this Builder enabling method chaining.
     *
     * @param error the {@code error} to set
     * @return a reference to this Builder
     */
    public Builder error(Error error) {
      this.error = error;
      return this;
    }

    /**
     * Returns a {@code Verification} built from the parameters previously set.
     *
     * @return a {@code Verification} built with parameters of this {@code Verification.Builder}
     */
    public Verification build() {
      return new Verification(this);
    }
  }
}

