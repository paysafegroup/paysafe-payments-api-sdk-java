// All Rights Reserved, Copyright Â© Paysafe Holdings UK Limited 2025. For more information see LICENSE

package com.paysafe.payments.model.verification;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.paysafe.payments.model.common.paymentfacilitator.PaymentFacilitator;

/**
 * Contains internal details to be passed in the verification request.
 * Verification allows merchants to validate a credit card without charging any amount on the card.
 * <ul>
 *   <li>
 *     <b>merchantRefNum:</b> Required. This is the merchant reference number created by the merchant and submitted as part of the request.  <br>
 *     Example: 2ca14f87ff6f60976d18
 *   </li>
 *   <li>
 *     <b>paymentHandleToken:</b> Required. This is the payment token generated by Paysafe that will be used for the Verification request.  <br>
 *     Example: 842778a0-03a2-11e9-8eb2-f2801f1b9fd1
 *   </li>
 *   <li>
 *     <b>customerIp:</b> This is the customer's IP address.  <br>
 *     Example: 111.111.111.111
 *   </li>
 *   <li>
 *     <b>dupCheck:</b> This validates that this request is not a duplicate. A request is considered a duplicate if the merchantRefNum
 *     has already been used in a previous request within the past 90 days. <br>
 *     Default: true
 *   </li>
 *   <li>
 *     <b>description:</b> This is a description of the transaction, provided by the merchant.  <br>
 *     Example: Consumer Card Verification
 *   </li>
 *   <li>
 *     <b>paymentFacilitator:</b> Contains information about Payment facilitator.  <br>
 *     <b>Note:</b> This object is only for Payment facilitator merchants.
 *   </li>
 * </ul>
 */
public class VerificationRequest {

  @JsonProperty("merchantRefNum")
  private String merchantRefNum;
  @JsonProperty("paymentHandleToken")
  private String paymentHandleToken;
  @JsonProperty("customerIp")
  private String customerIp;
  @JsonProperty("dupCheck")
  private Boolean dupCheck = true;
  @JsonProperty("description")
  private String description;
  @JsonProperty("paymentFacilitator")
  private PaymentFacilitator paymentFacilitator;

  private Map<String, Object> additionalParameters;

  public VerificationRequest() {
    super();
  }

  private VerificationRequest(final Builder builder) {
    setMerchantRefNum(builder.merchantRefNum);
    setPaymentHandleToken(builder.paymentHandleToken);
    setCustomerIp(builder.customerIp);
    setDupCheck(builder.dupCheck);
    setDescription(builder.description);
    setPaymentFacilitator(builder.paymentFacilitator);
    setAdditionalParameters(builder.additionalParameters);
  }

  public static Builder builder() {
    return new Builder();
  }

  public VerificationRequest merchantRefNum(String merchantRefNum) {
    this.merchantRefNum = merchantRefNum;
    return this;
  }

  /**
   * This is the merchant reference number created by the merchant and submitted as part of the request.
   *
   * @return merchantRefNum
   */
  public String getMerchantRefNum() {
    return merchantRefNum;
  }

  public void setMerchantRefNum(String merchantRefNum) {
    this.merchantRefNum = merchantRefNum;
  }

  public VerificationRequest paymentHandleToken(String paymentHandleToken) {
    this.paymentHandleToken = paymentHandleToken;
    return this;
  }

  /**
   * This is the payment token generated by Paysafe that will be used for the Verification request.
   *
   * @return paymentHandleToken
   */
  public String getPaymentHandleToken() {
    return paymentHandleToken;
  }

  public void setPaymentHandleToken(String paymentHandleToken) {
    this.paymentHandleToken = paymentHandleToken;
  }

  public VerificationRequest customerIp(String customerIp) {
    this.customerIp = customerIp;
    return this;
  }

  /**
   * This is the customer's IP address.
   *
   * @return customerIp
   */
  public String getCustomerIp() {
    return customerIp;
  }

  public void setCustomerIp(String customerIp) {
    this.customerIp = customerIp;
  }

  public VerificationRequest dupCheck(Boolean dupCheck) {
    this.dupCheck = dupCheck;
    return this;
  }

  /**
   * This validates that this request is not a duplicate. A request is considered a duplicate if the merchantRefNum has already been used in a previous
   * request within the past 90 days.
   *
   * @return dupCheck
   */
  public Boolean getDupCheck() {
    return dupCheck;
  }

  public void setDupCheck(Boolean dupCheck) {
    this.dupCheck = dupCheck;
  }

  public VerificationRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * This is a description of the transaction, provided by the merchant.
   *
   * @return description
   */
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public VerificationRequest paymentFacilitator(PaymentFacilitator paymentFacilitator) {
    this.paymentFacilitator = paymentFacilitator;
    return this;
  }

  /**
   * Contains information about Payment facilitator.  <b>Note:</b> This object is only for Payment facilitator merchants.
   *
   * @return paymentFacilitator
   */
  public PaymentFacilitator getPaymentFacilitator() {
    return paymentFacilitator;
  }

  public void setPaymentFacilitator(PaymentFacilitator paymentFacilitator) {
    this.paymentFacilitator = paymentFacilitator;
  }

  /**
   * This map holds additional parameters that can be used for features not available in this client library.
   * During serialization, each key-value pair is treated as if the key were a top-level field in the serialized object,
   * i.e. <code>{"merchantRefNum" : "uuid", "additionalParameter1" : 100, "additionalParameter2" : "string" }</code> .
   *
   * @return additionalParameters
   */
  @JsonAnyGetter
  public Map<String, Object> getAdditionalParameters() {
    return additionalParameters;
  }

  public void setAdditionalParameters(Map<String, Object> additionalParameters) {
    this.additionalParameters = additionalParameters;
  }

  public void addAdditionalParameter(String key, Object value) {
    if (additionalParameters == null) {
      additionalParameters = new HashMap<>();
    }
    additionalParameters.put(key, value);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VerificationRequest verificationRequest = (VerificationRequest) o;
    return Objects.equals(this.merchantRefNum, verificationRequest.merchantRefNum) &&
        Objects.equals(this.paymentHandleToken, verificationRequest.paymentHandleToken) &&
        Objects.equals(this.customerIp, verificationRequest.customerIp) &&
        Objects.equals(this.dupCheck, verificationRequest.dupCheck) &&
        Objects.equals(this.description, verificationRequest.description) &&
        Objects.equals(this.paymentFacilitator, verificationRequest.paymentFacilitator) &&
        Objects.equals(this.additionalParameters, verificationRequest.additionalParameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(merchantRefNum, paymentHandleToken, customerIp, dupCheck, description, paymentFacilitator, additionalParameters);
  }

  @Override
  public String toString() {

    return "class VerificationRequest {\n"
        + "    merchantRefNum: " + toIndentedString(merchantRefNum) + "\n"
        + "    paymentHandleToken: " + toIndentedString(paymentHandleToken) + "\n"
        + "    customerIp: " + toIndentedString(customerIp) + "\n"
        + "    dupCheck: " + toIndentedString(dupCheck) + "\n"
        + "    description: " + toIndentedString(description) + "\n"
        + "    paymentFacilitator: " + toIndentedString(paymentFacilitator) + "\n"
        + "    additionalParameters: " + toIndentedString(additionalParameters) + "\n"
        + "}";
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * {@code VerificationRequest} builder static inner class.
   */
  public static final class Builder {
    private String merchantRefNum;
    private String paymentHandleToken;
    private String customerIp;
    private Boolean dupCheck;
    private String description;
    private PaymentFacilitator paymentFacilitator;
    private Map<String, Object> additionalParameters;

    private Builder() {
    }

    /**
     * Sets the {@code merchantRefNum} and returns a reference to this Builder enabling method chaining.
     *
     * @param merchantRefNum the {@code merchantRefNum} to set
     * @return a reference to this Builder
     */
    public Builder merchantRefNum(String merchantRefNum) {
      this.merchantRefNum = merchantRefNum;
      return this;
    }

    /**
     * Sets the {@code paymentHandleToken} and returns a reference to this Builder enabling method chaining.
     *
     * @param paymentHandleToken the {@code paymentHandleToken} to set
     * @return a reference to this Builder
     */
    public Builder paymentHandleToken(String paymentHandleToken) {
      this.paymentHandleToken = paymentHandleToken;
      return this;
    }

    /**
     * Sets the {@code customerIp} and returns a reference to this Builder enabling method chaining.
     *
     * @param customerIp the {@code customerIp} to set
     * @return a reference to this Builder
     */
    public Builder customerIp(String customerIp) {
      this.customerIp = customerIp;
      return this;
    }

    /**
     * Sets the {@code dupCheck} and returns a reference to this Builder enabling method chaining.
     *
     * @param dupCheck the {@code dupCheck} to set
     * @return a reference to this Builder
     */
    public Builder dupCheck(Boolean dupCheck) {
      this.dupCheck = dupCheck;
      return this;
    }

    /**
     * Sets the {@code description} and returns a reference to this Builder enabling method chaining.
     *
     * @param description the {@code description} to set
     * @return a reference to this Builder
     */
    public Builder description(String description) {
      this.description = description;
      return this;
    }

    /**
     * Sets the {@code paymentFacilitator} and returns a reference to this Builder enabling method chaining.
     *
     * @param paymentFacilitator the {@code paymentFacilitator} to set
     * @return a reference to this Builder
     */
    public Builder paymentFacilitator(PaymentFacilitator paymentFacilitator) {
      this.paymentFacilitator = paymentFacilitator;
      return this;
    }

    /**
     * Inserts one key/value pair to additionalParameters and returns a reference to this Builder enabling method chaining.
     *
     * @return a reference to this Builder
     */
    public Builder putAdditionalParameter(String key, Object value) {
      if (this.additionalParameters == null) {
        this.additionalParameters = new HashMap<>();
      }
      this.additionalParameters.put(key, value);
      return this;
    }

    /**
     * Inserts provided key/value pairs to additionalParameters and returns a reference to this Builder enabling method chaining.
     *
     * @return a reference to this Builder
     */
    public Builder putAllAdditionalParameters(Map<String, Object> additionalParameters) {
      if (this.additionalParameters == null) {
        this.additionalParameters = new HashMap<>();
      }
      this.additionalParameters.putAll(additionalParameters);
      return this;
    }

    /**
     * Sets the {@code additionalParameters} and returns a reference to this Builder enabling method chaining.
     *
     * @param additionalParameters the {@code additionalParameters} to set
     * @return a reference to this Builder
     */
    public Builder additionalParameters(Map<String, Object> additionalParameters) {
      this.additionalParameters = additionalParameters;
      return this;
    }

    /**
     * Returns a {@code VerificationRequest} built from the parameters previously set.
     *
     * @return a {@code VerificationRequest} built with parameters of this {@code VerificationRequest.Builder}
     */
    public VerificationRequest build() {
      return new VerificationRequest(this);
    }
  }
}
